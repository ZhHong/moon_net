// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgLogin.proto

#ifndef PROTOBUF_MsgLogin_2eproto__INCLUDED
#define PROTOBUF_MsgLogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace NetMessage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MsgLogin_2eproto();
void protobuf_AssignDesc_MsgLogin_2eproto();
void protobuf_ShutdownFile_MsgLogin_2eproto();

class C2SReqLogin;
class S2CLogin;
class C2SReqRegister;
class S2CRegister;

enum S2CLogin_ERet {
  S2CLogin_ERet_Ok = 0,
  S2CLogin_ERet_AccountNotExsit = 1,
  S2CLogin_ERet_PasswordError = 2,
  S2CLogin_ERet_LoginAgain = 3
};
bool S2CLogin_ERet_IsValid(int value);
const S2CLogin_ERet S2CLogin_ERet_ERet_MIN = S2CLogin_ERet_Ok;
const S2CLogin_ERet S2CLogin_ERet_ERet_MAX = S2CLogin_ERet_LoginAgain;
const int S2CLogin_ERet_ERet_ARRAYSIZE = S2CLogin_ERet_ERet_MAX + 1;

enum S2CRegister_ERet {
  S2CRegister_ERet_Ok = 0,
  S2CRegister_ERet_AccountRepeat = 1
};
bool S2CRegister_ERet_IsValid(int value);
const S2CRegister_ERet S2CRegister_ERet_ERet_MIN = S2CRegister_ERet_Ok;
const S2CRegister_ERet S2CRegister_ERet_ERet_MAX = S2CRegister_ERet_AccountRepeat;
const int S2CRegister_ERet_ERet_ARRAYSIZE = S2CRegister_ERet_ERet_MAX + 1;

// ===================================================================

class C2SReqLogin : public ::google::protobuf::MessageLite {
 public:
  C2SReqLogin();
  virtual ~C2SReqLogin();

  C2SReqLogin(const C2SReqLogin& from);

  inline C2SReqLogin& operator=(const C2SReqLogin& from) {
    CopyFrom(from);
    return *this;
  }

  static const C2SReqLogin& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const C2SReqLogin* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(C2SReqLogin* other);

  // implements Message ----------------------------------------------

  C2SReqLogin* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const C2SReqLogin& from);
  void MergeFrom(const C2SReqLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:NetMessage.C2SReqLogin)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  ::std::string* username_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MsgLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MsgLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_MsgLogin_2eproto();
  friend void protobuf_ShutdownFile_MsgLogin_2eproto();

  void InitAsDefaultInstance();
  static C2SReqLogin* default_instance_;
};
// -------------------------------------------------------------------

class S2CLogin : public ::google::protobuf::MessageLite {
 public:
  S2CLogin();
  virtual ~S2CLogin();

  S2CLogin(const S2CLogin& from);

  inline S2CLogin& operator=(const S2CLogin& from) {
    CopyFrom(from);
    return *this;
  }

  static const S2CLogin& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const S2CLogin* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(S2CLogin* other);

  // implements Message ----------------------------------------------

  S2CLogin* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const S2CLogin& from);
  void MergeFrom(const S2CLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef S2CLogin_ERet ERet;
  static const ERet Ok = S2CLogin_ERet_Ok;
  static const ERet AccountNotExsit = S2CLogin_ERet_AccountNotExsit;
  static const ERet PasswordError = S2CLogin_ERet_PasswordError;
  static const ERet LoginAgain = S2CLogin_ERet_LoginAgain;
  static inline bool ERet_IsValid(int value) {
    return S2CLogin_ERet_IsValid(value);
  }
  static const ERet ERet_MIN =
    S2CLogin_ERet_ERet_MIN;
  static const ERet ERet_MAX =
    S2CLogin_ERet_ERet_MAX;
  static const int ERet_ARRAYSIZE =
    S2CLogin_ERet_ERet_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .NetMessage.S2CLogin.ERet ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::NetMessage::S2CLogin_ERet ret() const;
  inline void set_ret(::NetMessage::S2CLogin_ERet value);

  // optional uint64 accountID = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 2;
  inline ::google::protobuf::uint64 accountid() const;
  inline void set_accountid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NetMessage.S2CLogin)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_accountid();
  inline void clear_has_accountid();

  ::google::protobuf::uint64 accountid_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MsgLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MsgLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_MsgLogin_2eproto();
  friend void protobuf_ShutdownFile_MsgLogin_2eproto();

  void InitAsDefaultInstance();
  static S2CLogin* default_instance_;
};
// -------------------------------------------------------------------

class C2SReqRegister : public ::google::protobuf::MessageLite {
 public:
  C2SReqRegister();
  virtual ~C2SReqRegister();

  C2SReqRegister(const C2SReqRegister& from);

  inline C2SReqRegister& operator=(const C2SReqRegister& from) {
    CopyFrom(from);
    return *this;
  }

  static const C2SReqRegister& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const C2SReqRegister* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(C2SReqRegister* other);

  // implements Message ----------------------------------------------

  C2SReqRegister* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const C2SReqRegister& from);
  void MergeFrom(const C2SReqRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:NetMessage.C2SReqRegister)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  ::std::string* username_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MsgLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MsgLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_MsgLogin_2eproto();
  friend void protobuf_ShutdownFile_MsgLogin_2eproto();

  void InitAsDefaultInstance();
  static C2SReqRegister* default_instance_;
};
// -------------------------------------------------------------------

class S2CRegister : public ::google::protobuf::MessageLite {
 public:
  S2CRegister();
  virtual ~S2CRegister();

  S2CRegister(const S2CRegister& from);

  inline S2CRegister& operator=(const S2CRegister& from) {
    CopyFrom(from);
    return *this;
  }

  static const S2CRegister& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const S2CRegister* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(S2CRegister* other);

  // implements Message ----------------------------------------------

  S2CRegister* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const S2CRegister& from);
  void MergeFrom(const S2CRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef S2CRegister_ERet ERet;
  static const ERet Ok = S2CRegister_ERet_Ok;
  static const ERet AccountRepeat = S2CRegister_ERet_AccountRepeat;
  static inline bool ERet_IsValid(int value) {
    return S2CRegister_ERet_IsValid(value);
  }
  static const ERet ERet_MIN =
    S2CRegister_ERet_ERet_MIN;
  static const ERet ERet_MAX =
    S2CRegister_ERet_ERet_MAX;
  static const int ERet_ARRAYSIZE =
    S2CRegister_ERet_ERet_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .NetMessage.S2CRegister.ERet ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::NetMessage::S2CRegister_ERet ret() const;
  inline void set_ret(::NetMessage::S2CRegister_ERet value);

  // @@protoc_insertion_point(class_scope:NetMessage.S2CRegister)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MsgLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MsgLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_MsgLogin_2eproto();
  friend void protobuf_ShutdownFile_MsgLogin_2eproto();

  void InitAsDefaultInstance();
  static S2CRegister* default_instance_;
};
// ===================================================================


// ===================================================================

// C2SReqLogin

// required string username = 1;
inline bool C2SReqLogin::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2SReqLogin::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2SReqLogin::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2SReqLogin::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& C2SReqLogin::username() const {
  return *username_;
}
inline void C2SReqLogin::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void C2SReqLogin::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void C2SReqLogin::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SReqLogin::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* C2SReqLogin::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SReqLogin::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 2;
inline bool C2SReqLogin::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2SReqLogin::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2SReqLogin::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2SReqLogin::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& C2SReqLogin::password() const {
  return *password_;
}
inline void C2SReqLogin::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void C2SReqLogin::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void C2SReqLogin::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SReqLogin::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* C2SReqLogin::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SReqLogin::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2CLogin

// required .NetMessage.S2CLogin.ERet ret = 1;
inline bool S2CLogin::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2CLogin::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2CLogin::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2CLogin::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::NetMessage::S2CLogin_ERet S2CLogin::ret() const {
  return static_cast< ::NetMessage::S2CLogin_ERet >(ret_);
}
inline void S2CLogin::set_ret(::NetMessage::S2CLogin_ERet value) {
  assert(::NetMessage::S2CLogin_ERet_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint64 accountID = 2;
inline bool S2CLogin::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2CLogin::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2CLogin::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2CLogin::clear_accountid() {
  accountid_ = GOOGLE_ULONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::uint64 S2CLogin::accountid() const {
  return accountid_;
}
inline void S2CLogin::set_accountid(::google::protobuf::uint64 value) {
  set_has_accountid();
  accountid_ = value;
}

// -------------------------------------------------------------------

// C2SReqRegister

// required string username = 1;
inline bool C2SReqRegister::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2SReqRegister::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2SReqRegister::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2SReqRegister::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& C2SReqRegister::username() const {
  return *username_;
}
inline void C2SReqRegister::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void C2SReqRegister::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void C2SReqRegister::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SReqRegister::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* C2SReqRegister::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SReqRegister::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 2;
inline bool C2SReqRegister::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2SReqRegister::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2SReqRegister::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2SReqRegister::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& C2SReqRegister::password() const {
  return *password_;
}
inline void C2SReqRegister::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void C2SReqRegister::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void C2SReqRegister::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SReqRegister::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* C2SReqRegister::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SReqRegister::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2CRegister

// required .NetMessage.S2CRegister.ERet ret = 1;
inline bool S2CRegister::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2CRegister::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2CRegister::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2CRegister::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::NetMessage::S2CRegister_ERet S2CRegister::ret() const {
  return static_cast< ::NetMessage::S2CRegister_ERet >(ret_);
}
inline void S2CRegister::set_ret(::NetMessage::S2CRegister_ERet value) {
  assert(::NetMessage::S2CRegister_ERet_IsValid(value));
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NetMessage

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MsgLogin_2eproto__INCLUDED
