// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgUserInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgUserInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace NetMessage {

void protobuf_ShutdownFile_MsgUserInfo_2eproto() {
  delete C2SReqUserInfo::default_instance_;
  delete S2CUserInfo::default_instance_;
  delete C2SReqCreateRole::default_instance_;
  delete S2CCreateRole::default_instance_;
  delete C2SReqEnterScene::default_instance_;
  delete S2CEnterScene::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MsgUserInfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MsgUserInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  C2SReqUserInfo::default_instance_ = new C2SReqUserInfo();
  S2CUserInfo::default_instance_ = new S2CUserInfo();
  C2SReqCreateRole::default_instance_ = new C2SReqCreateRole();
  S2CCreateRole::default_instance_ = new S2CCreateRole();
  C2SReqEnterScene::default_instance_ = new C2SReqEnterScene();
  S2CEnterScene::default_instance_ = new S2CEnterScene();
  C2SReqUserInfo::default_instance_->InitAsDefaultInstance();
  S2CUserInfo::default_instance_->InitAsDefaultInstance();
  C2SReqCreateRole::default_instance_->InitAsDefaultInstance();
  S2CCreateRole::default_instance_->InitAsDefaultInstance();
  C2SReqEnterScene::default_instance_->InitAsDefaultInstance();
  S2CEnterScene::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgUserInfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MsgUserInfo_2eproto_once_);
void protobuf_AddDesc_MsgUserInfo_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MsgUserInfo_2eproto_once_,
                 &protobuf_AddDesc_MsgUserInfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgUserInfo_2eproto {
  StaticDescriptorInitializer_MsgUserInfo_2eproto() {
    protobuf_AddDesc_MsgUserInfo_2eproto();
  }
} static_descriptor_initializer_MsgUserInfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int C2SReqUserInfo::kAccountIDFieldNumber;
#endif  // !_MSC_VER

C2SReqUserInfo::C2SReqUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void C2SReqUserInfo::InitAsDefaultInstance() {
}

C2SReqUserInfo::C2SReqUserInfo(const C2SReqUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void C2SReqUserInfo::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SReqUserInfo::~C2SReqUserInfo() {
  SharedDtor();
}

void C2SReqUserInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void C2SReqUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const C2SReqUserInfo& C2SReqUserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MsgUserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MsgUserInfo_2eproto();
#endif
  return *default_instance_;
}

C2SReqUserInfo* C2SReqUserInfo::default_instance_ = NULL;

C2SReqUserInfo* C2SReqUserInfo::New() const {
  return new C2SReqUserInfo;
}

void C2SReqUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool C2SReqUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 accountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SReqUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 accountID = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

}

int C2SReqUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 accountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SReqUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const C2SReqUserInfo*>(&from));
}

void C2SReqUserInfo::MergeFrom(const C2SReqUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
}

void C2SReqUserInfo::CopyFrom(const C2SReqUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SReqUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2SReqUserInfo::Swap(C2SReqUserInfo* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string C2SReqUserInfo::GetTypeName() const {
  return "NetMessage.C2SReqUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int S2CUserInfo::kPlayerIDFieldNumber;
const int S2CUserInfo::kNameFieldNumber;
const int S2CUserInfo::kLevelFieldNumber;
const int S2CUserInfo::kExpFieldNumber;
const int S2CUserInfo::kWinCountFieldNumber;
const int S2CUserInfo::kLoseCountFieldNumber;
const int S2CUserInfo::kRanCountFieldNumber;
const int S2CUserInfo::kHerosFieldNumber;
#endif  // !_MSC_VER

S2CUserInfo::S2CUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void S2CUserInfo::InitAsDefaultInstance() {
}

S2CUserInfo::S2CUserInfo(const S2CUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void S2CUserInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  exp_ = 0u;
  wincount_ = 0u;
  losecount_ = 0u;
  rancount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CUserInfo::~S2CUserInfo() {
  SharedDtor();
}

void S2CUserInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void S2CUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const S2CUserInfo& S2CUserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MsgUserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MsgUserInfo_2eproto();
#endif
  return *default_instance_;
}

S2CUserInfo* S2CUserInfo::default_instance_ = NULL;

S2CUserInfo* S2CUserInfo::New() const {
  return new S2CUserInfo;
}

void S2CUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    exp_ = 0u;
    wincount_ = 0u;
    losecount_ = 0u;
    rancount_ = 0u;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool S2CUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winCount;
        break;
      }

      // optional uint32 winCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_loseCount;
        break;
      }

      // optional uint32 loseCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losecount_)));
          set_has_losecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ranCount;
        break;
      }

      // optional uint32 ranCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rancount_)));
          set_has_rancount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_heros;
        break;
      }

      // repeated sint32 heros = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 64, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 winCount = 5;
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wincount(), output);
  }

  // optional uint32 loseCount = 6;
  if (has_losecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->losecount(), output);
  }

  // optional uint32 ranCount = 7;
  if (has_rancount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rancount(), output);
  }

  // repeated sint32 heros = 8;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      8, this->heros(i), output);
  }

}

int S2CUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 winCount = 5;
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wincount());
    }

    // optional uint32 loseCount = 6;
    if (has_losecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losecount());
    }

    // optional uint32 ranCount = 7;
    if (has_rancount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rancount());
    }

  }
  // repeated sint32 heros = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const S2CUserInfo*>(&from));
}

void S2CUserInfo::MergeFrom(const S2CUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
    if (from.has_losecount()) {
      set_losecount(from.losecount());
    }
    if (from.has_rancount()) {
      set_rancount(from.rancount());
    }
  }
}

void S2CUserInfo::CopyFrom(const S2CUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2CUserInfo::Swap(S2CUserInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(wincount_, other->wincount_);
    std::swap(losecount_, other->losecount_);
    std::swap(rancount_, other->rancount_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string S2CUserInfo::GetTypeName() const {
  return "NetMessage.S2CUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int C2SReqCreateRole::kNameFieldNumber;
const int C2SReqCreateRole::kAccountIDFieldNumber;
#endif  // !_MSC_VER

C2SReqCreateRole::C2SReqCreateRole()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void C2SReqCreateRole::InitAsDefaultInstance() {
}

C2SReqCreateRole::C2SReqCreateRole(const C2SReqCreateRole& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void C2SReqCreateRole::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SReqCreateRole::~C2SReqCreateRole() {
  SharedDtor();
}

void C2SReqCreateRole::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void C2SReqCreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const C2SReqCreateRole& C2SReqCreateRole::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MsgUserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MsgUserInfo_2eproto();
#endif
  return *default_instance_;
}

C2SReqCreateRole* C2SReqCreateRole::default_instance_ = NULL;

C2SReqCreateRole* C2SReqCreateRole::New() const {
  return new C2SReqCreateRole;
}

void C2SReqCreateRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    accountid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool C2SReqCreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountID;
        break;
      }

      // optional uint64 accountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SReqCreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint64 accountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accountid(), output);
  }

}

int C2SReqCreateRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 accountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SReqCreateRole::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const C2SReqCreateRole*>(&from));
}

void C2SReqCreateRole::MergeFrom(const C2SReqCreateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
}

void C2SReqCreateRole::CopyFrom(const C2SReqCreateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SReqCreateRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2SReqCreateRole::Swap(C2SReqCreateRole* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string C2SReqCreateRole::GetTypeName() const {
  return "NetMessage.C2SReqCreateRole";
}


// ===================================================================

bool S2CCreateRole_ERet_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const S2CCreateRole_ERet S2CCreateRole::OK;
const S2CCreateRole_ERet S2CCreateRole::PlayerNameAlreadyExist;
const S2CCreateRole_ERet S2CCreateRole::ERet_MIN;
const S2CCreateRole_ERet S2CCreateRole::ERet_MAX;
const int S2CCreateRole::ERet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int S2CCreateRole::kRetFieldNumber;
const int S2CCreateRole::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

S2CCreateRole::S2CCreateRole()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void S2CCreateRole::InitAsDefaultInstance() {
}

S2CCreateRole::S2CCreateRole(const S2CCreateRole& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void S2CCreateRole::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CCreateRole::~S2CCreateRole() {
  SharedDtor();
}

void S2CCreateRole::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void S2CCreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const S2CCreateRole& S2CCreateRole::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MsgUserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MsgUserInfo_2eproto();
#endif
  return *default_instance_;
}

S2CCreateRole* S2CCreateRole::default_instance_ = NULL;

S2CCreateRole* S2CCreateRole::New() const {
  return new S2CCreateRole;
}

void S2CCreateRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool S2CCreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NetMessage.S2CCreateRole.ERet ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetMessage::S2CCreateRole_ERet_IsValid(value)) {
            set_ret(static_cast< ::NetMessage::S2CCreateRole_ERet >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // optional uint64 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CCreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NetMessage.S2CCreateRole.ERet ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint64 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

}

int S2CCreateRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NetMessage.S2CCreateRole.ERet ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint64 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CCreateRole::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const S2CCreateRole*>(&from));
}

void S2CCreateRole::MergeFrom(const S2CCreateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
}

void S2CCreateRole::CopyFrom(const S2CCreateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CCreateRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2CCreateRole::Swap(S2CCreateRole* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string S2CCreateRole::GetTypeName() const {
  return "NetMessage.S2CCreateRole";
}


// ===================================================================

#ifndef _MSC_VER
const int C2SReqEnterScene::kAccountIDFieldNumber;
const int C2SReqEnterScene::kPlayerIDFieldNumber;
const int C2SReqEnterScene::kSceneIDFieldNumber;
#endif  // !_MSC_VER

C2SReqEnterScene::C2SReqEnterScene()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void C2SReqEnterScene::InitAsDefaultInstance() {
}

C2SReqEnterScene::C2SReqEnterScene(const C2SReqEnterScene& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void C2SReqEnterScene::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SReqEnterScene::~C2SReqEnterScene() {
  SharedDtor();
}

void C2SReqEnterScene::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void C2SReqEnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const C2SReqEnterScene& C2SReqEnterScene::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MsgUserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MsgUserInfo_2eproto();
#endif
  return *default_instance_;
}

C2SReqEnterScene* C2SReqEnterScene::default_instance_ = NULL;

C2SReqEnterScene* C2SReqEnterScene::New() const {
  return new C2SReqEnterScene;
}

void C2SReqEnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = GOOGLE_ULONGLONG(0);
    playerid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool C2SReqEnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 accountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // optional uint64 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneID;
        break;
      }

      // optional uint32 sceneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SReqEnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 accountID = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

  // optional uint64 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint32 sceneID = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }

}

int C2SReqEnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 accountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // optional uint64 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint32 sceneID = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SReqEnterScene::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const C2SReqEnterScene*>(&from));
}

void C2SReqEnterScene::MergeFrom(const C2SReqEnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
}

void C2SReqEnterScene::CopyFrom(const C2SReqEnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SReqEnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2SReqEnterScene::Swap(C2SReqEnterScene* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(playerid_, other->playerid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string C2SReqEnterScene::GetTypeName() const {
  return "NetMessage.C2SReqEnterScene";
}


// ===================================================================

bool S2CEnterScene_ERet_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const S2CEnterScene_ERet S2CEnterScene::OK;
const S2CEnterScene_ERet S2CEnterScene::Error;
const S2CEnterScene_ERet S2CEnterScene::ERet_MIN;
const S2CEnterScene_ERet S2CEnterScene::ERet_MAX;
const int S2CEnterScene::ERet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int S2CEnterScene::kRetFieldNumber;
#endif  // !_MSC_VER

S2CEnterScene::S2CEnterScene()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void S2CEnterScene::InitAsDefaultInstance() {
}

S2CEnterScene::S2CEnterScene(const S2CEnterScene& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void S2CEnterScene::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CEnterScene::~S2CEnterScene() {
  SharedDtor();
}

void S2CEnterScene::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void S2CEnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const S2CEnterScene& S2CEnterScene::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MsgUserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MsgUserInfo_2eproto();
#endif
  return *default_instance_;
}

S2CEnterScene* S2CEnterScene::default_instance_ = NULL;

S2CEnterScene* S2CEnterScene::New() const {
  return new S2CEnterScene;
}

void S2CEnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool S2CEnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NetMessage.S2CEnterScene.ERet ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetMessage::S2CEnterScene_ERet_IsValid(value)) {
            set_ret(static_cast< ::NetMessage::S2CEnterScene_ERet >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CEnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NetMessage.S2CEnterScene.ERet ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

}

int S2CEnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NetMessage.S2CEnterScene.ERet ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CEnterScene::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const S2CEnterScene*>(&from));
}

void S2CEnterScene::MergeFrom(const S2CEnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void S2CEnterScene::CopyFrom(const S2CEnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CEnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2CEnterScene::Swap(S2CEnterScene* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string S2CEnterScene::GetTypeName() const {
  return "NetMessage.S2CEnterScene";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NetMessage

// @@protoc_insertion_point(global_scope)
